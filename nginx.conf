user www-data;
worker_processes auto;
pid /run/nginx.pid;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections 768;
}


http {
    # Hide nginx version information.
  	server_tokens off;

	# Specify MIME types for files.
	include       mime.types;
	default_type  application/octet-stream;

    #log_format  main  ' -  [] "" '
    #                  '  "" '
    #                  '"" ""';

    #access_log  logs/access.log  main;


      # Speed up file transfers by using sendfile() to copy directly
      # between descriptors rather than using read()/write().
      # For performance reasons, on FreeBSD systems w/ ZFS
      # this option should be disabled as ZFS's ARC caches
      # frequently used files in RAM by default.
      sendfile        on;

      # Don't send out partial frames; this increases throughput
      # since TCP frames are filled up before being sent out.
      tcp_nopush      on;
    tcp_nodelay on;

    keepalive_timeout  65;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    # Enable gzip compression.
	  gzip on;

	  # Compression level (1-9).
	  # 5 is a perfect compromise between size and CPU usage, offering about
	  # 75% reduction for most ASCII files (almost identical to level 9).
	  gzip_comp_level    5;

	  # Don't compress anything that's already small and unlikely to shrink much
	  # if at all (the default is 20 bytes, which is bad as that usually leads to
	  # larger files after gzipping).
	  gzip_min_length    256;

	  # Compress data even for clients that are connecting to us via proxies,
	  # identified by the "Via" header (required for CloudFront).
	  gzip_proxied       any;

	  # Tell proxies to cache both the gzipped and regular version of a resource
	  # whenever the client's Accept-Encoding capabilities header varies;
	  # Avoids the issue where a non-gzip capable client (which is extremely rare
	  # today) would display gibberish if their proxy gave them the gzipped version.
	  gzip_vary          on;

	  # Compress all output labeled with one of the following MIME-types.
	  gzip_types
	    application/atom+xml
	    application/javascript
	    application/json
	    application/ld+json
	    application/manifest+json
	    application/rss+xml
	    application/vnd.geo+json
	    application/vnd.ms-fontobject
	    application/x-font-ttf
	    application/x-web-app-manifest+json
	    application/xhtml+xml
	    application/xml
	    font/opentype
	    image/bmp
	    image/svg+xml
	    image/x-icon
	    text/cache-manifest
	    text/css
	    text/plain
	    text/vcard
	    text/vnd.rim.location.xloc
	    text/vtt
	    text/x-component
	    text/x-cross-domain-policy;
	  # text/html is always compressed by gzip module
    	gzip_disable "msie6";

    pagespeed off;
    pagespeed AdminPath /pagespeed_admin;
    pagespeed GlobalAdminPath /pagespeed_global_admin;

    client_max_body_size 300m;

    server {
        listen       80;
        server_name  localhost;

        location ~ ^/pagespeed_admin { allow 89.28.39.157; deny all; }
        location ~ ^/pagespeed_global_admin { allow 89.28.39.157; deny all; }
        # Needs to exist and be writable by nginx.  Use tmpfs for best performance.
        pagespeed FileCachePath /var/ngx_pagespeed_cache;

        # Ensure requests for pagespeed optimized resources go to the pagespeed handler
        # and no extraneous headers get set.
        location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
          add_header "" "";
        }
        location ~ "^/pagespeed_static/" { }
        location ~ "^/ngx_pagespeed_beacon$" { }

        #pagespeed EnableFilters prioritize_critical_css;
        #pagespeed EnableFilters inline_css;
        #pagespeed CssInlineMaxBytes 500000;
        pagespeed EnableCachePurge on;

        location ~*  \.(svg|jpg|jpeg|png|gif|ico|css|js)$ {
            expires 7d;
        }

        #access_log  logs/host.access.log  main;
	    root /webroot/laravel/public;
	    index index.php;

        location / {
            try_files $uri $uri/ /index.php?$query_string;
            auth_basic "Autoo Dev";
            auth_basic_user_file ~/.htpasswd;
            #allow 89.28.39.157;
            #deny all;
        }
        
	    location ~ \.php$ {
            try_files $uri =404;

	        fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

            include fastcgi_params;

            fastcgi_intercept_errors off;
            fastcgi_buffer_size 16k;
            fastcgi_buffers 4 16k;
            fastcgi_read_timeout 300;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
            deny  all;
        }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
